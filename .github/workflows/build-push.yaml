name: build push

on:
  workflow_call:
    inputs:
      BUILD_TYPE:
        required: true
        type: string
      BUILD_ENV:
        required: true
        type: string

    secrets:
      ARTIFACTORY_TOKEN:
        required: true

env:
  NODE_VERSION: "20"
  GIT_SHA: ${{ github.sha }}
  BUILD_TYPE: ${{ inputs.BUILD_TYPE }}
  ARTIFACTORY_USER: ${{ vars.ARTIFACTORY_USER }}
  ARTIFACTORY_TOKEN: ${{ secrets.ARTIFACTORY_TOKEN }}
  DOCKER_REGISTRY: bluebird-100-docker-local.artifactory-ent.devops.abbott
  JFROG_REGISTRY_BASE: https://artifactory-ent.devops.abbott/artifactory/bluebird-100-generic-local
  REDIS_URL: ${{ vars.REDIS_URL }}
  REDIS_ACCESS_KEY: ${{ secrets.REDIS_ACCESS_KEY }}

jobs:
  generate-timestamp:
    runs-on: ubuntu-latest
    outputs:
      timestamp: ${{ steps.current-time.outputs.formattedTime }}
    steps:
      - name: Get Current Time
        uses: josStorer/get-current-time@master
        id: current-time
        with:
          format: YYMMDDHHmmss
          utcOffset: "+00:00"

  generate-build-info:
    runs-on: ubuntu-latest
    needs: generate-timestamp
    outputs:
      web_build_tag: ${{ steps.build-info.outputs.web_build_tag }}
      functions_build_tag: ${{ steps.build-info.outputs.functions_build_tag }}
    steps:
      - name: "Generating Build Tags"
        id: build-info
        shell: bash
        env:
          TIMESTAMP: ${{ needs.generate-timestamp.outputs.timestamp }}
        run: |
          if [ "$BUILD_TYPE" == "nonprod" ]; then
            SUFFIX="${TIMESTAMP}-${GITHUB_SHA:0:10}"
          else
            SUFFIX="${GITHUB_REF_NAME}-${GITHUB_SHA:0:10}"
          fi

          echo $SUFFIX

          echo "web_build_tag=web-${SUFFIX}" >> "$GITHUB_OUTPUT"
          echo "functions_build_tag=functions-${SUFFIX}.zip" >> "$GITHUB_OUTPUT"

  generate-release-artifacts:
    runs-on: ubuntu-latest
    if: inputs.BUILD_TYPE == 'release' && inputs.BUILD_ENV == 'staging'
    environment: ${{ inputs.BUILD_ENV }}
    needs: generate-build-info
    steps:
      - name: "Checkout GitHub Action"
        uses: actions/checkout@master

      - name: Setup Node ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8
          run_install: false

      - name: "Install Dependencies"
        shell: bash
        run: |
          pnpm install

      # TODO: We should be able to run test-coverage without build
      - name: "Build"
        shell: bash
        run: |
          pnpm build

      - name: "Create Test Coverage Report"
        shell: bash
        run: |
          pnpm test:coverage

      - name: Create Build Tags File
        shell: bash
        env:
          WEB_BUILD_TAG: ${{ needs.generate-build-info.outputs.web_build_tag }}
          FUNCTIONS_BUILD_TAG: ${{ needs.generate-build-info.outputs.functions_build_tag }}
        run: |
          touch "$GITHUB_REF_NAME"_build_tags.txt
          echo $WEB_BUILD_TAG >> "$GITHUB_REF_NAME"_build_tags.txt
          echo $FUNCTIONS_BUILD_TAG >> "$GITHUB_REF_NAME"_build_tags.txt

      - name: "Upload Build Tag Report"
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.ref_name }}-build_tags_report
          path: ${{ github.ref_name }}_build_tags.txt
          if-no-files-found: warn

      - name: "Upload Test Coverage Report"
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.ref_name }}-unit_test_coverage_report
          path: coverage/
          if-no-files-found: warn

  build-web:
    runs-on: ubuntu-latest
    environment: ${{ inputs.BUILD_ENV }}
    needs: generate-build-info
    steps:
      - name: "Checkout GitHub Action"
        uses: actions/checkout@master

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: v0.9.1

      - name: Login to Artifactory
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ vars.ARTIFACTORY_USER }}
          password: ${{ secrets.ARTIFACTORY_TOKEN }}

      - name: Build and push web app
        uses: docker/build-push-action@v4
        with:
          context: .
          file: apps/web/Dockerfile
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/dtc-web-${{ inputs.BUILD_ENV }}:${{ needs.generate-build-info.outputs.web_build_tag }}
          build-args: |
            GIT_SHA=${{ github.sha }}
            ARTIFACTORY_USER=${{ vars.ARTIFACTORY_USER }}
            ARTIFACTORY_TOKEN=${{ secrets.ARTIFACTORY_TOKEN }}
            LINGO_ENV=${{ vars.LINGO_ENV }}
            ADOBE_DTM_SCRIPT=${{ vars.ADOBE_DTM_SCRIPT }}
            BRAZE_WEB_KEY=${{ secrets.BRAZE_WEB_KEY }}
            BRAZE_SDK_URL=${{ vars.BRAZE_SDK_URL }}
            BRAZE_SUBSCRIPTION_SPECIAL_OFFERS=${{ vars.BRAZE_SUBSCRIPTION_SPECIAL_OFFERS }}
            BRAZE_SUBSCRIPTION_NEWS_CONTENT=${{ vars.BRAZE_SUBSCRIPTION_NEWS_CONTENT }}
            BRAZE_SUBSCRIPTION_PRODUCT_UPDATES=${{ vars.BRAZE_SUBSCRIPTION_PRODUCT_UPDATES }}
            NEXT_PUBLIC_ARVATO_RETURN_SCRIPT=${{ vars.NEXT_PUBLIC_ARVATO_RETURN_SCRIPT }}
            NEXT_PUBLIC_ARVATO_TRACKING_SCRIPT=${{ vars.NEXT_PUBLIC_ARVATO_TRACKING_SCRIPT }}
            NEXT_PUBLIC_HARNESS_CLIENT_API_KEY=${{ secrets.NEXT_PUBLIC_HARNESS_CLIENT_API_KEY }}
            NEXT_PUBLIC_GOOGLE_PLACES_API_KEY=${{ secrets.NEXT_PUBLIC_GOOGLE_PLACES_API_KEY }}
            HARNESS_SERVER_API_KEY=${{secrets.HARNESS_SERVER_API_KEY}}
            REDIS_URL=${{ vars.REDIS_URL }}
            REDIS_ACCESS_KEY=${{ secrets.REDIS_ACCESS_KEY }}

  build-functions:
    runs-on: ubuntu-latest
    environment: ${{ inputs.BUILD_ENV }}
    needs:
      - generate-build-info
      - generate-timestamp
    steps:
      - name: "Checkout GitHub Action"
        uses: actions/checkout@master

      - name: Setup Node ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8
          run_install: false

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Artifactory
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ vars.ARTIFACTORY_USER }}
          password: ${{ secrets.ARTIFACTORY_TOKEN }}

      - name: Prune Functions
        shell: bash
        run: |
          pnpm dlx turbo@2.0.4 prune @ecommerce/functions

      - name: Install Dependencies and Build
        shell: bash
        env:
          CI: true
        run: |
          cd out
          pnpm --filter @ecommerce/functions... install
          pnpm build
          pnpm --filter @ecommerce/functions --prod --no-optional deploy built

      - name: Zip and Upload Functions app
        shell: bash
        run: |
          ZIP_NAME="dtc-functions:${{ needs.generate-timestamp.outputs.timestamp }}.zip"
          cd ./out/built
          zip --symlinks -r $ZIP_NAME .
          curl -sSf -u ${{ vars.ARTIFACTORY_USER }}:${{ secrets.ARTIFACTORY_TOKEN }} \
          -X PUT \
          -T  $ZIP_NAME \
          ${{ env.JFROG_REGISTRY_BASE }}/dtc-functions-${{ inputs.BUILD_ENV }}/${{ needs.generate-build-info.outputs.functions_build_tag }}
